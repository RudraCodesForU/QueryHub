import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Database,
  Play,
  Save,
  History,
  Zap,
  FileText,
  Settings,
  Brain,
  Clock,
  TrendingUp,
  Table,
  Search,
  Copy,
  Download,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Loader2,
  Share2,
  Sparkles,
  Users,
  BarChart3,
  Command,
  Maximize2,
  Terminal,
  Code,
  Eye,
  BookOpen,
  Rocket,
  Target,
  Globe,
  Shield,
  Mic,
  Volume2,
  Star,
  Award,
  Crown,
  Cpu,
  HardDrive,
  Network,
} from "lucide-react";

const Index = () => {
  const [naturalQuery, setNaturalQuery] = useState("");
  const [sqlQuery, setSqlQuery] = useState(
    `-- 🚀 Smart Query Generated by AI
SELECT
  u.id,
  u.name,
  u.email,
  COUNT(o.id) as order_count,
  SUM(o.total) as total_spent,
  AVG(o.total) as avg_order_value,
  RANK() OVER (ORDER BY SUM(o.total) DESC) as customer_rank
FROM users u
LEFT JOIN orders o ON u.id = o.user_id
WHERE u.created_at >= '2023-01-01'
  AND u.status = 'active'
GROUP BY u.id, u.name, u.email
HAVING SUM(o.total) > 1000
ORDER BY total_spent DESC, order_count DESC
LIMIT 50;`,
  );
  const [isExecuting, setIsExecuting] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [activeConnections, setActiveConnections] = useState(3);
  const [voiceSupported, setVoiceSupported] = useState(false);
  const [executionResults, setExecutionResults] = useState("idle"); // idle, success, error
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const recognitionRef = useRef<any>(null);

  const [queryPerformance, setQueryPerformance] = useState({
    executionTime: "142ms",
    rowsScanned: "15,240",
    bytesProcessed: "2.4MB",
    costSaved: "67%",
  });

  // Check for browser voice support and network status
  useEffect(() => {
    const checkVoiceSupport = () => {
      if (
        "webkitSpeechRecognition" in window ||
        "SpeechRecognition" in window
      ) {
        setVoiceSupported(true);
        const SpeechRecognition =
          (window as any).webkitSpeechRecognition ||
          (window as any).SpeechRecognition;

        try {
          recognitionRef.current = new SpeechRecognition();
          recognitionRef.current.continuous = false;
          recognitionRef.current.interimResults = false;
          recognitionRef.current.lang = "en-US";
          recognitionRef.current.maxAlternatives = 1;
        } catch (error) {
          console.error("Error initializing speech recognition:", error);
          setVoiceSupported(false);
        }
      } else {
        setVoiceSupported(false);
        console.log("Speech recognition not supported in this browser");
      }
    };

    // Network status monitoring
    const handleOnline = () => {
      setIsOnline(true);
      console.log("Network connection restored");
    };

    const handleOffline = () => {
      setIsOnline(false);
      console.log("Network connection lost");
      if (isListening) {
        setIsListening(false);
      }
    };

    checkVoiceSupport();

    // Add network event listeners
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    // Cleanup
    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, [isListening]);

  // Simulate real-time metrics
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveConnections(Math.floor(Math.random() * 5) + 2);
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  // Enhanced AI SQL Generation
  const handleGenerateSQL = async () => {
    if (!naturalQuery.trim()) {
      alert("Please enter a description of what you want to query!");
      return;
    }

    setIsGenerating(true);
    setExecutionResults("idle");

    // Simulate realistic AI processing
    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Generate contextual SQL based on input
      const generatedSQL = generateContextualSQL(naturalQuery);
      setSqlQuery(generatedSQL);
      setExecutionResults("success");
    } catch (error) {
      console.error("Error generating SQL:", error);
      setExecutionResults("error");
    } finally {
      setIsGenerating(false);
    }
  };

  // Generate contextual SQL based on natural language input
  const generateContextualSQL = (query: string) => {
    const lowerQuery = query.toLowerCase();

    if (lowerQuery.includes("customer") && lowerQuery.includes("value")) {
      return `-- 🎯 AI-Generated: Customer Value Analysis
WITH customer_metrics AS (
  SELECT
    u.id,
    u.name,
    u.email,
    u.created_at as signup_date,
    COUNT(DISTINCT o.id) as total_orders,
    COUNT(DISTINCT DATE(o.created_at)) as active_days,
    SUM(o.total) as lifetime_value,
    AVG(o.total) as avg_order_value,
    MAX(o.created_at) as last_order_date,
    DATEDIFF(CURRENT_DATE, MAX(o.created_at)) as days_since_last_order
  FROM users u
  LEFT JOIN orders o ON u.id = o.user_id
  WHERE u.created_at >= '2023-01-01'
  GROUP BY u.id, u.name, u.email, u.created_at
),
customer_segments AS (
  SELECT *,
    CASE
      WHEN lifetime_value >= 5000 AND days_since_last_order <= 30 THEN 'VIP Active'
      WHEN lifetime_value >= 2000 AND days_since_last_order <= 60 THEN 'High Value'
      WHEN total_orders >= 10 AND days_since_last_order <= 90 THEN 'Loyal'
      WHEN days_since_last_order > 180 THEN 'At Risk'
      ELSE 'Regular'
    END as customer_segment,
    NTILE(10) OVER (ORDER BY lifetime_value DESC) as value_decile
  FROM customer_metrics
)
SELECT
  id,
  name,
  email,
  customer_segment,
  value_decile,
  total_orders,
  lifetime_value,
  avg_order_value,
  active_days,
  ROUND(lifetime_value / NULLIF(active_days, 0), 2) as value_per_active_day
FROM customer_segments
WHERE lifetime_value > 1000
ORDER BY lifetime_value DESC, total_orders DESC
LIMIT 100;`;
    }

    if (lowerQuery.includes("revenue") || lowerQuery.includes("sales")) {
      return `-- 📊 AI-Generated: Revenue Analysis
SELECT
  DATE_TRUNC('month', o.created_at) as month,
  COUNT(DISTINCT o.id) as total_orders,
  COUNT(DISTINCT o.user_id) as unique_customers,
  SUM(o.total) as total_revenue,
  AVG(o.total) as avg_order_value,
  SUM(o.total) / COUNT(DISTINCT o.user_id) as revenue_per_customer
FROM orders o
WHERE o.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH)
  AND o.status = 'completed'
GROUP BY DATE_TRUNC('month', o.created_at)
ORDER BY month DESC;`;
    }

    if (lowerQuery.includes("product") && lowerQuery.includes("popular")) {
      return `-- 🏆 AI-Generated: Popular Products Analysis
SELECT
  p.id,
  p.name,
  p.category,
  COUNT(oi.product_id) as times_ordered,
  SUM(oi.quantity) as total_quantity_sold,
  SUM(oi.price * oi.quantity) as total_revenue,
  AVG(oi.price) as avg_selling_price,
  COUNT(DISTINCT o.user_id) as unique_buyers
FROM products p
JOIN order_items oi ON p.id = oi.product_id
JOIN orders o ON oi.order_id = o.id
WHERE o.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)
  AND o.status = 'completed'
GROUP BY p.id, p.name, p.category
ORDER BY total_revenue DESC, times_ordered DESC
LIMIT 20;`;
    }

    // Default comprehensive query
    return `-- 🤖 AI-Generated: General Business Overview
-- Query based on: "${query}"
WITH business_metrics AS (
  SELECT
    COUNT(DISTINCT u.id) as total_users,
    COUNT(DISTINCT o.id) as total_orders,
    COUNT(DISTINCT p.id) as total_products,
    SUM(o.total) as total_revenue,
    AVG(o.total) as avg_order_value
  FROM users u
  LEFT JOIN orders o ON u.id = o.user_id
  LEFT JOIN order_items oi ON o.id = oi.order_id
  LEFT JOIN products p ON oi.product_id = p.id
  WHERE o.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
)
SELECT
  'Business Overview' as metric_type,
  total_users,
  total_orders,
  total_products,
  total_revenue,
  avg_order_value,
  ROUND(total_revenue / NULLIF(total_users, 0), 2) as revenue_per_user,
  ROUND(total_orders / NULLIF(total_users, 0), 2) as orders_per_user
FROM business_metrics;`;
  };

  // Enhanced Query Execution
  const handleExecuteQuery = async () => {
    if (!sqlQuery.trim()) {
      alert("No SQL query to execute!");
      return;
    }

    setIsExecuting(true);
    setExecutionResults("idle");

    try {
      // Simulate query execution
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Update performance metrics
      setQueryPerformance({
        executionTime: `${Math.floor(Math.random() * 200) + 50}ms`,
        rowsScanned: `${(Math.floor(Math.random() * 50000) + 5000).toLocaleString()}`,
        bytesProcessed: `${(Math.random() * 10 + 1).toFixed(1)}MB`,
        costSaved: `${Math.floor(Math.random() * 40) + 30}%`,
      });

      setExecutionResults("success");
    } catch (error) {
      console.error("Error executing query:", error);
      setExecutionResults("error");
    } finally {
      setIsExecuting(false);
    }
  };

  // Enhanced Voice Input with Better Error Handling
  const handleVoiceInput = () => {
    if (!voiceSupported) {
      alert(
        "Voice input is not supported in your browser. Please use Chrome, Edge, or Safari with HTTPS.",
      );
      return;
    }

    if (isListening) {
      // Stop listening
      try {
        recognitionRef.current?.stop();
      } catch (error) {
        console.warn("Error stopping recognition:", error);
      }
      setIsListening(false);
      return;
    }

    // Check if we're on HTTPS or localhost
    const isSecureContext =
      window.location.protocol === "https:" ||
      window.location.hostname === "localhost" ||
      window.location.hostname === "127.0.0.1";

    if (!isSecureContext) {
      alert(
        "Voice input requires HTTPS or localhost. Please use a secure connection.",
      );
      return;
    }

    // Start listening
    setIsListening(true);

    recognitionRef.current.onstart = () => {
      console.log("Voice recognition started successfully");
    };

    recognitionRef.current.onresult = (event: any) => {
      try {
        const transcript = event.results[0][0].transcript;
        console.log("Voice transcript:", transcript);
        setNaturalQuery(transcript);
        setIsListening(false);
      } catch (error) {
        console.error("Error processing voice result:", error);
        setIsListening(false);
      }
    };

    recognitionRef.current.onerror = (event: any) => {
      console.error("Voice recognition error:", event.error);
      setIsListening(false);

      let errorMessage = "";
      switch (event.error) {
        case "network":
          errorMessage =
            "Network error: Please check your internet connection and try again. Voice recognition requires an active internet connection.";
          break;
        case "not-allowed":
          errorMessage =
            "Microphone access denied. Please allow microphone access in your browser settings and refresh the page.";
          break;
        case "no-speech":
          errorMessage = "No speech detected. Please try speaking again.";
          break;
        case "audio-capture":
          errorMessage =
            "Microphone not found or not working. Please check your microphone and try again.";
          break;
        case "service-not-allowed":
          errorMessage =
            "Speech recognition service not allowed. Please ensure you're using HTTPS or localhost.";
          break;
        case "bad-grammar":
          errorMessage = "Speech recognition grammar error. Please try again.";
          break;
        case "language-not-supported":
          errorMessage =
            "Language not supported. Please check your browser's language settings.";
          break;
        default:
          errorMessage = `Voice recognition error (${event.error}). Please try again or use text input instead.`;
      }

      alert(errorMessage);
    };

    recognitionRef.current.onend = () => {
      console.log("Voice recognition ended");
      setIsListening(false);
    };

    // Add network connectivity check
    if (!navigator.onLine) {
      alert(
        "No internet connection. Voice recognition requires internet access.",
      );
      setIsListening(false);
      return;
    }

    try {
      // Set additional properties for better reliability
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.maxAlternatives = 1;
      recognitionRef.current.lang = "en-US";

      recognitionRef.current.start();
      console.log("Starting voice recognition...");
    } catch (error) {
      console.error("Error starting voice recognition:", error);
      setIsListening(false);
      alert(
        "Failed to start voice recognition. Please try again or use text input.",
      );
    }
  };

  // Copy to clipboard function
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      alert("Copied to clipboard!");
    } catch (error) {
      console.error("Failed to copy:", error);
      alert("Failed to copy to clipboard");
    }
  };

  const enhancedSampleData = [
    {
      id: 1,
      name: "Sarah Chen",
      email: "sarah.chen@company.com",
      segment: "VIP Active",
      decile: 1,
      orders: 24,
      lifetime_value: 8450.75,
      avg_order: 352.11,
      active_days: 89,
      value_per_day: 94.95,
    },
    {
      id: 2,
      name: "Marcus Johnson",
      email: "m.johnson@enterprise.co",
      segment: "High Value",
      decile: 2,
      orders: 18,
      lifetime_value: 6200.5,
      avg_order: 344.47,
      active_days: 67,
      value_per_day: 92.54,
    },
    {
      id: 3,
      name: "Elena Rodriguez",
      email: "elena.r@techstartup.io",
      segment: "Loyal",
      decile: 3,
      orders: 31,
      lifetime_value: 4875.25,
      avg_order: 157.27,
      active_days: 124,
      value_per_day: 39.32,
    },
    {
      id: 4,
      name: "David Kim",
      email: "david@globalcorp.com",
      segment: "High Value",
      decile: 2,
      orders: 15,
      lifetime_value: 5650.0,
      avg_order: 376.67,
      active_days: 45,
      value_per_day: 125.56,
    },
  ];

  const queryHistory = [
    {
      id: 1,
      name: "Customer Lifetime Value Analysis",
      time: "5 min ago",
      type: "CTE",
      performance: "Fast",
      author: "You",
    },
    {
      id: 2,
      name: "Revenue Trends by Quarter",
      time: "32 min ago",
      type: "Aggregation",
      performance: "Optimized",
      author: "Sarah M.",
    },
    {
      id: 3,
      name: "Churn Risk Prediction",
      time: "2 hours ago",
      type: "Window Functions",
      performance: "Complex",
      author: "Team AI",
    },
  ];

  const dbSchema = [
    {
      table: "users",
      columns: ["id", "name", "email", "created_at", "status"],
      records: "156.2K",
      size: "45MB",
      indexes: 4,
    },
    {
      table: "orders",
      columns: ["id", "user_id", "total", "status", "created_at"],
      records: "892.1K",
      size: "234MB",
      indexes: 6,
    },
    {
      table: "products",
      columns: ["id", "name", "price", "category", "stock"],
      records: "12.4K",
      size: "8MB",
      indexes: 3,
    },
    {
      table: "order_items",
      columns: ["order_id", "product_id", "quantity", "price"],
      records: "2.1M",
      size: "567MB",
      indexes: 5,
    },
  ];

  const aiSuggestions = [
    "Find customers who haven't ordered in 90+ days",
    "Show revenue trends by month for the last year",
    "Analyze top-selling products by category",
    "Compare customer segments by geographic region",
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl animate-pulse delay-500"></div>
      </div>

      {/* Floating Particles */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {Array.from({ length: 20 }).map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-white/20 rounded-full animate-pulse"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${2 + Math.random() * 3}s`,
            }}
          />
        ))}
      </div>

      {/* Header */}
      <header className="glass-effect backdrop-blur-xl bg-white/5 border-b border-white/10 relative z-10">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="relative">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-400 via-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg shadow-blue-500/25">
                  <Database className="w-7 h-7 text-white" />
                </div>
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-pulse shadow-lg"></div>
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-white via-cyan-200 to-blue-300 bg-clip-text text-transparent">
                  Query-Hub
                </h1>
                <p className="text-sm text-cyan-200/70">
                  Next-Gen AI SQL Platform
                </p>
              </div>
              <div className="flex items-center space-x-2 ml-6">
                <Badge className="bg-green-500/20 text-green-300 border-green-400/30">
                  <CheckCircle className="w-3 h-3 mr-1" />
                  Live
                </Badge>
                <Badge className="bg-purple-500/20 text-purple-300 border-purple-400/30">
                  <Crown className="w-3 h-3 mr-1" />
                  Pro
                </Badge>
                {!isOnline && (
                  <Badge className="bg-red-500/20 text-red-300 border-red-400/30">
                    <AlertCircle className="w-3 h-3 mr-1" />
                    Offline
                  </Badge>
                )}
                {!voiceSupported && (
                  <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-400/30">
                    <AlertCircle className="w-3 h-3 mr-1" />
                    No Voice
                  </Badge>
                )}
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2 px-3 py-1 bg-white/10 rounded-full backdrop-blur-sm">
                <Users className="w-4 h-4 text-cyan-300" />
                <span className="text-sm text-cyan-200">
                  {activeConnections} active
                </span>
              </div>
              <Button
                variant="outline"
                size="sm"
                className="bg-white/10 border-white/20 text-white hover:bg-white/20"
                onClick={() => copyToClipboard(window.location.href)}
              >
                <Share2 className="w-4 h-4" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="bg-white/10 border-white/20 text-white hover:bg-white/20"
              >
                <Settings className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 py-6 relative z-10">
        <div className="grid grid-cols-12 gap-6 h-[calc(100vh-140px)]">
          {/* Left Sidebar */}
          <div className="col-span-3 space-y-4">
            {/* AI Assistant */}
            <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium flex items-center text-white">
                  <Sparkles className="w-4 h-4 mr-2 text-yellow-400" />
                  AI Assistant
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Button
                    onClick={handleVoiceInput}
                    size="sm"
                    disabled={!voiceSupported || !isOnline}
                    className={`flex-1 ${
                      isListening
                        ? "bg-red-500/20 text-red-300 border-red-400/30 animate-pulse"
                        : voiceSupported && isOnline
                          ? "bg-blue-500/20 text-blue-300 border-blue-400/30 hover:bg-blue-500/30"
                          : "bg-gray-500/20 text-gray-400 border-gray-400/30 cursor-not-allowed"
                    }`}
                    title={
                      !isOnline
                        ? "Voice input requires internet connection"
                        : !voiceSupported
                          ? "Voice input not supported in this browser"
                          : isListening
                            ? "Click to stop listening"
                            : "Click to start voice input"
                    }
                  >
                    {isListening ? (
                      <Volume2 className="w-4 h-4 animate-pulse" />
                    ) : (
                      <Mic className="w-4 h-4" />
                    )}
                  </Button>
                  <Button
                    size="sm"
                    className="bg-purple-500/20 text-purple-300 border-purple-400/30 hover:bg-purple-500/30"
                    onClick={() =>
                      setNaturalQuery(
                        "Show me top customers by total spending and segment them by value",
                      )
                    }
                  >
                    <Brain className="w-4 h-4" />
                  </Button>
                </div>
                <div className="space-y-2">
                  {aiSuggestions.slice(0, 2).map((suggestion, i) => (
                    <div
                      key={i}
                      className="p-2 bg-white/5 rounded-lg border border-white/10 text-xs text-gray-300 hover:bg-white/10 cursor-pointer transition-colors"
                      onClick={() => setNaturalQuery(suggestion)}
                    >
                      {suggestion}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Database Schema */}
            <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl flex-1">
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium flex items-center text-white">
                  <Database className="w-4 h-4 mr-2 text-cyan-400" />
                  Schema Explorer
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {dbSchema.map((table, index) => (
                  <div
                    key={index}
                    className="p-3 rounded-lg border border-white/10 bg-white/5 hover:bg-white/10 cursor-pointer transition-all group"
                    onClick={() => {
                      setNaturalQuery(
                        `Analyze the ${table.table} table and show key insights`,
                      );
                    }}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium text-sm text-white group-hover:text-cyan-300">
                        {table.table}
                      </span>
                      <div className="flex space-x-1">
                        <Badge
                          variant="secondary"
                          className="text-xs bg-cyan-500/20 text-cyan-300"
                        >
                          {table.records}
                        </Badge>
                        <Badge
                          variant="secondary"
                          className="text-xs bg-purple-500/20 text-purple-300"
                        >
                          {table.size}
                        </Badge>
                      </div>
                    </div>
                    <div className="text-xs text-gray-400">
                      {table.columns.slice(0, 3).join(", ")}
                      {table.columns.length > 3 &&
                        ` +${table.columns.length - 3} more`}
                    </div>
                    <div className="flex items-center mt-1">
                      <Target className="w-3 h-3 text-green-400 mr-1" />
                      <span className="text-xs text-green-400">
                        {table.indexes} indexes
                      </span>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Query History */}
            <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium flex items-center text-white">
                  <History className="w-4 h-4 mr-2 text-orange-400" />
                  Recent Queries
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {queryHistory.map((query) => (
                  <div
                    key={query.id}
                    className="p-2 rounded-lg border border-white/10 bg-white/5 hover:bg-white/10 cursor-pointer transition-all"
                    onClick={() =>
                      setNaturalQuery(
                        `Generate a query similar to: ${query.name}`,
                      )
                    }
                  >
                    <div className="font-medium text-xs text-white mb-1">
                      {query.name}
                    </div>
                    <div className="flex items-center justify-between text-xs">
                      <span className="text-gray-400">{query.time}</span>
                      <div className="flex space-x-1">
                        <Badge
                          variant="outline"
                          className="text-xs border-white/20 text-cyan-300"
                        >
                          {query.type}
                        </Badge>
                        <Badge
                          variant="outline"
                          className={`text-xs ${
                            query.performance === "Fast"
                              ? "border-green-400/30 text-green-300"
                              : query.performance === "Optimized"
                                ? "border-blue-400/30 text-blue-300"
                                : "border-orange-400/30 text-orange-300"
                          }`}
                        >
                          {query.performance}
                        </Badge>
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="col-span-9">
            <Tabs defaultValue="ai-builder" className="h-full">
              <TabsList className="grid w-full grid-cols-5 bg-white/10 backdrop-blur-sm">
                <TabsTrigger
                  value="ai-builder"
                  className="data-[state=active]:bg-white/20 text-white"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  AI Builder
                </TabsTrigger>
                <TabsTrigger
                  value="editor"
                  className="data-[state=active]:bg-white/20 text-white"
                >
                  <Code className="w-4 h-4 mr-2" />
                  SQL Studio
                </TabsTrigger>
                <TabsTrigger
                  value="results"
                  className="data-[state=active]:bg-white/20 text-white"
                >
                  <BarChart3 className="w-4 h-4 mr-2" />
                  Analytics
                </TabsTrigger>
                <TabsTrigger
                  value="optimize"
                  className="data-[state=active]:bg-white/20 text-white"
                >
                  <Rocket className="w-4 h-4 mr-2" />
                  Optimize
                </TabsTrigger>
                <TabsTrigger
                  value="collaborate"
                  className="data-[state=active]:bg-white/20 text-white"
                >
                  <Users className="w-4 h-4 mr-2" />
                  Collaborate
                </TabsTrigger>
              </TabsList>

              {/* AI Query Builder */}
              <TabsContent
                value="ai-builder"
                className="mt-4 h-[calc(100%-60px)]"
              >
                <div className="grid grid-cols-2 gap-6 h-full">
                  <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader>
                      <CardTitle className="text-lg flex items-center text-white">
                        <Brain className="w-5 h-5 mr-2 text-purple-400" />
                        Natural Language Input
                        {isListening && (
                          <Badge className="ml-auto bg-red-500/20 text-red-300 animate-pulse">
                            <Volume2 className="w-3 h-3 mr-1" />
                            Listening...
                          </Badge>
                        )}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="relative">
                          <textarea
                            value={naturalQuery}
                            onChange={(e) => setNaturalQuery(e.target.value)}
                            placeholder={
                              voiceSupported
                                ? "Describe your data analysis needs... e.g., 'Show me high-value customers with their purchase patterns and segment them by lifetime value' or click the mic button to speak."
                                : "Describe your data analysis needs... e.g., 'Show me high-value customers with their purchase patterns and segment them by lifetime value'"
                            }
                            className="w-full h-36 p-4 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-400 resize-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent backdrop-blur-sm"
                          />
                          {naturalQuery && (
                            <div className="absolute top-2 right-2">
                              <Badge className="bg-green-500/20 text-green-300">
                                Ready
                              </Badge>
                            </div>
                          )}
                        </div>
                        <div className="grid grid-cols-2 gap-2">
                          <Button
                            onClick={handleGenerateSQL}
                            className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white shadow-lg"
                            disabled={isGenerating || !naturalQuery.trim()}
                          >
                            {isGenerating ? (
                              <>
                                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                                Analyzing...
                              </>
                            ) : (
                              <>
                                <Sparkles className="w-4 h-4 mr-2" />
                                Generate with AI
                              </>
                            )}
                          </Button>
                          <Button
                            onClick={handleVoiceInput}
                            variant="outline"
                            disabled={!voiceSupported || !isOnline}
                            className={`border-white/20 text-white ${
                              isListening
                                ? "bg-red-500/20 animate-pulse"
                                : voiceSupported && isOnline
                                  ? "hover:bg-white/10"
                                  : "cursor-not-allowed opacity-50"
                            }`}
                          >
                            {isListening ? (
                              <Volume2 className="w-4 h-4 mr-2 animate-pulse" />
                            ) : (
                              <Mic className="w-4 h-4 mr-2" />
                            )}
                            {isListening ? "Stop" : "Voice Input"}
                          </Button>
                        </div>
                        {!isOnline && (
                          <p className="text-xs text-red-400">
                            Voice input requires internet connection
                          </p>
                        )}
                        {isOnline && !voiceSupported && (
                          <p className="text-xs text-yellow-400">
                            Voice input requires Chrome, Edge, or Safari browser
                            with HTTPS
                          </p>
                        )}
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader>
                      <CardTitle className="text-lg flex items-center justify-between text-white">
                        <span className="flex items-center">
                          <Zap className="w-5 h-5 mr-2 text-yellow-400" />
                          Generated SQL
                          {executionResults === "success" && (
                            <Badge className="ml-2 bg-green-500/20 text-green-300">
                              <CheckCircle className="w-3 h-3 mr-1" />
                              Generated
                            </Badge>
                          )}
                        </span>
                        <div className="flex space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-white/20 text-white hover:bg-white/10"
                            onClick={() => copyToClipboard(sqlQuery)}
                          >
                            <Copy className="w-4 h-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-white/20 text-white hover:bg-white/10"
                          >
                            <Save className="w-4 h-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-white/20 text-white hover:bg-white/10"
                            onClick={() =>
                              copyToClipboard(window.location.href)
                            }
                          >
                            <Share2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="relative">
                          <pre className="bg-gray-900/80 text-gray-100 p-4 rounded-lg text-sm overflow-auto h-36 font-mono border border-white/10 backdrop-blur-sm">
                            {sqlQuery}
                          </pre>
                        </div>
                        <Button
                          onClick={handleExecuteQuery}
                          className="w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg"
                          disabled={isExecuting || !sqlQuery.trim()}
                        >
                          {isExecuting ? (
                            <>
                              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                              Executing Query...
                            </>
                          ) : (
                            <>
                              <Play className="w-4 h-4 mr-2" />
                              Execute & Analyze
                            </>
                          )}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* SQL Editor */}
              <TabsContent value="editor" className="mt-4 h-[calc(100%-60px)]">
                <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl h-full">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg text-white flex items-center">
                        <Terminal className="w-5 h-5 mr-2 text-green-400" />
                        Advanced SQL Studio
                      </CardTitle>
                      <div className="flex space-x-2">
                        <Badge className="bg-cyan-500/20 text-cyan-300">
                          <Cpu className="w-3 h-3 mr-1" />
                          {queryPerformance.executionTime}
                        </Badge>
                        <Button
                          variant="outline"
                          size="sm"
                          className="border-white/20 text-white hover:bg-white/10"
                        >
                          <Maximize2 className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600"
                          onClick={handleExecuteQuery}
                          disabled={isExecuting}
                        >
                          {isExecuting ? (
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          ) : (
                            <Play className="w-4 h-4 mr-2" />
                          )}
                          Run
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="h-[calc(100%-80px)]">
                    <div className="relative h-full">
                      <textarea
                        value={sqlQuery}
                        onChange={(e) => setSqlQuery(e.target.value)}
                        className="w-full h-full p-4 bg-gray-900/80 text-gray-100 font-mono text-sm rounded-lg resize-none focus:ring-2 focus:ring-cyan-500 border border-white/10 backdrop-blur-sm"
                        placeholder="-- Start typing your SQL query here...
-- Use Ctrl+Space for auto-completion
-- Use Ctrl+Enter to execute"
                      />
                      <div className="absolute bottom-2 right-2 flex items-center space-x-2 text-xs text-gray-400">
                        <span>
                          Ln {sqlQuery.split("\n").length}, Col{" "}
                          {sqlQuery.length}
                        </span>
                        <Separator
                          orientation="vertical"
                          className="h-4 bg-white/20"
                        />
                        <span>PostgreSQL</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Results & Analytics */}
              <TabsContent value="results" className="mt-4 h-[calc(100%-60px)]">
                <div className="grid grid-rows-2 gap-4 h-full">
                  <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-lg text-white flex items-center">
                          <BarChart3 className="w-5 h-5 mr-2 text-cyan-400" />
                          Query Results
                        </CardTitle>
                        <div className="flex items-center space-x-4">
                          <Badge
                            className={`${
                              executionResults === "success"
                                ? "bg-green-500/20 text-green-300"
                                : executionResults === "error"
                                  ? "bg-red-500/20 text-red-300"
                                  : "bg-blue-500/20 text-blue-300"
                            }`}
                          >
                            {executionResults === "success" ? (
                              <CheckCircle className="w-3 h-3 mr-1" />
                            ) : executionResults === "error" ? (
                              <AlertCircle className="w-3 h-3 mr-1" />
                            ) : (
                              <Clock className="w-3 h-3 mr-1" />
                            )}
                            {queryPerformance.executionTime}
                          </Badge>
                          <Badge className="bg-blue-500/20 text-blue-300">
                            {enhancedSampleData.length} rows
                          </Badge>
                          <Badge className="bg-purple-500/20 text-purple-300">
                            Cost saved: {queryPerformance.costSaved}
                          </Badge>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-white/20 text-white hover:bg-white/10"
                            onClick={() => {
                              const csvData = enhancedSampleData
                                .map(
                                  (row) =>
                                    `${row.name},${row.email},${row.segment},${row.lifetime_value}`,
                                )
                                .join("\n");
                              copyToClipboard(
                                "Name,Email,Segment,Lifetime Value\n" + csvData,
                              );
                            }}
                          >
                            <Download className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="border border-white/10 rounded-lg overflow-hidden bg-white/5 backdrop-blur-sm">
                        <table className="w-full">
                          <thead className="bg-white/10">
                            <tr>
                              <th className="px-4 py-3 text-left text-xs font-medium text-cyan-300 uppercase tracking-wider">
                                Customer
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-cyan-300 uppercase tracking-wider">
                                Segment
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-cyan-300 uppercase tracking-wider">
                                Orders
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-cyan-300 uppercase tracking-wider">
                                Lifetime Value
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-cyan-300 uppercase tracking-wider">
                                Value/Day
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {enhancedSampleData.map((row, index) => (
                              <tr
                                key={index}
                                className="border-t border-white/10 hover:bg-white/5 transition-colors"
                              >
                                <td className="px-4 py-3 text-sm">
                                  <div>
                                    <div className="font-medium text-white">
                                      {row.name}
                                    </div>
                                    <div className="text-gray-400 text-xs">
                                      {row.email}
                                    </div>
                                  </div>
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  <Badge
                                    className={`${
                                      row.segment === "VIP Active"
                                        ? "bg-purple-500/20 text-purple-300"
                                        : row.segment === "High Value"
                                          ? "bg-blue-500/20 text-blue-300"
                                          : "bg-green-500/20 text-green-300"
                                    }`}
                                  >
                                    {row.segment}
                                  </Badge>
                                </td>
                                <td className="px-4 py-3 text-sm text-white">
                                  {row.orders}
                                </td>
                                <td className="px-4 py-3 text-sm font-mono text-green-300">
                                  ${row.lifetime_value.toLocaleString()}
                                </td>
                                <td className="px-4 py-3 text-sm font-mono text-cyan-300">
                                  ${row.value_per_day}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </CardContent>
                  </Card>

                  <div className="grid grid-cols-4 gap-4">
                    {[
                      {
                        title: "Execution Time",
                        value: queryPerformance.executionTime,
                        change: "-35%",
                        icon: Clock,
                        color: "text-green-400",
                      },
                      {
                        title: "Rows Scanned",
                        value: queryPerformance.rowsScanned,
                        change: "Optimized",
                        icon: HardDrive,
                        color: "text-blue-400",
                      },
                      {
                        title: "Data Processed",
                        value: queryPerformance.bytesProcessed,
                        change: "-40%",
                        icon: Network,
                        color: "text-purple-400",
                      },
                      {
                        title: "Cost Saved",
                        value: queryPerformance.costSaved,
                        change: "vs baseline",
                        icon: TrendingUp,
                        color: "text-yellow-400",
                      },
                    ].map((metric, i) => (
                      <Card
                        key={i}
                        className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl"
                      >
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-xs text-gray-400 mb-1">
                                {metric.title}
                              </p>
                              <p
                                className={`text-lg font-bold ${metric.color}`}
                              >
                                {metric.value}
                              </p>
                              <p className="text-xs text-green-400">
                                {metric.change}
                              </p>
                            </div>
                            <metric.icon
                              className={`w-6 h-6 ${metric.color}`}
                            />
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              </TabsContent>

              {/* Optimize */}
              <TabsContent
                value="optimize"
                className="mt-4 h-[calc(100%-60px)]"
              >
                <div className="grid grid-cols-2 gap-6 h-full">
                  <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader>
                      <CardTitle className="text-lg flex items-center text-white">
                        <Rocket className="w-5 h-5 mr-2 text-orange-400" />
                        Performance Insights
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="p-4 bg-green-500/10 border border-green-500/20 rounded-lg">
                        <div className="flex items-center mb-2">
                          <Award className="w-5 h-5 text-green-400 mr-2" />
                          <span className="font-medium text-green-300">
                            Excellent Performance
                          </span>
                        </div>
                        <p className="text-sm text-green-200">
                          Query executed 67% faster than baseline with optimal
                          index usage
                        </p>
                      </div>

                      <div className="space-y-3">
                        {[
                          {
                            label: "Execution Time",
                            value: queryPerformance.executionTime,
                            status: "excellent",
                          },
                          {
                            label: "Index Usage",
                            value: "100%",
                            status: "excellent",
                          },
                          {
                            label: "Memory Usage",
                            value: "12MB",
                            status: "good",
                          },
                          {
                            label: "CPU Cost",
                            value: "Low",
                            status: "excellent",
                          },
                        ].map((item, i) => (
                          <div
                            key={i}
                            className="flex justify-between items-center p-2 bg-white/5 rounded"
                          >
                            <span className="text-sm text-gray-300">
                              {item.label}
                            </span>
                            <div className="flex items-center space-x-2">
                              <span className="text-sm font-mono text-white">
                                {item.value}
                              </span>
                              <div
                                className={`w-2 h-2 rounded-full ${
                                  item.status === "excellent"
                                    ? "bg-green-400"
                                    : "bg-yellow-400"
                                }`}
                              />
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader>
                      <CardTitle className="text-lg flex items-center text-white">
                        <Zap className="w-5 h-5 mr-2 text-yellow-400" />
                        AI Recommendations
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="p-3 border border-blue-500/20 bg-blue-500/10 rounded-lg">
                        <div className="flex items-center mb-2">
                          <Star className="w-4 h-4 text-blue-400 mr-2" />
                          <span className="font-medium text-blue-300 text-sm">
                            Index Optimization
                          </span>
                        </div>
                        <p className="text-xs text-blue-200">
                          Consider composite index on (user_id, created_at) for
                          15% improvement
                        </p>
                      </div>

                      <div className="p-3 border border-purple-500/20 bg-purple-500/10 rounded-lg">
                        <div className="flex items-center mb-2">
                          <Sparkles className="w-4 h-4 text-purple-400 mr-2" />
                          <span className="font-medium text-purple-300 text-sm">
                            Query Rewrite
                          </span>
                        </div>
                        <p className="text-xs text-purple-200">
                          AI suggests using window functions instead of
                          subqueries for better performance
                        </p>
                      </div>

                      <div className="p-3 border border-green-500/20 bg-green-500/10 rounded-lg">
                        <div className="flex items-center mb-2">
                          <CheckCircle className="w-4 h-4 text-green-400 mr-2" />
                          <span className="font-medium text-green-300 text-sm">
                            Optimal Structure
                          </span>
                        </div>
                        <p className="text-xs text-green-200">
                          Query structure is well-optimized for current data
                          distribution
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* Collaborate */}
              <TabsContent
                value="collaborate"
                className="mt-4 h-[calc(100%-60px)]"
              >
                <div className="grid grid-cols-3 gap-6 h-full">
                  <Card className="glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader>
                      <CardTitle className="text-lg text-white flex items-center">
                        <Users className="w-5 h-5 mr-2 text-green-400" />
                        Team Activity
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      {[
                        {
                          name: "Sarah M.",
                          action: "shared a query",
                          time: "2m ago",
                          avatar: "SM",
                        },
                        {
                          name: "David K.",
                          action: "optimized schema",
                          time: "15m ago",
                          avatar: "DK",
                        },
                        {
                          name: "Alex R.",
                          action: "created dashboard",
                          time: "1h ago",
                          avatar: "AR",
                        },
                      ].map((activity, i) => (
                        <div
                          key={i}
                          className="flex items-center space-x-3 p-2 bg-white/5 rounded-lg"
                        >
                          <div className="w-8 h-8 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center text-xs font-bold text-white">
                            {activity.avatar}
                          </div>
                          <div className="flex-1">
                            <div className="text-sm text-white">
                              {activity.name}
                            </div>
                            <div className="text-xs text-gray-400">
                              {activity.action}
                            </div>
                          </div>
                          <div className="text-xs text-gray-500">
                            {activity.time}
                          </div>
                        </div>
                      ))}
                    </CardContent>
                  </Card>

                  <Card className="col-span-2 glass-effect bg-white/5 border-white/10 backdrop-blur-xl">
                    <CardHeader>
                      <CardTitle className="text-lg text-white flex items-center justify-between">
                        <span className="flex items-center">
                          <Share2 className="w-5 h-5 mr-2 text-blue-400" />
                          Shared Workspace
                        </span>
                        <Button
                          size="sm"
                          className="bg-blue-500/20 text-blue-300 border-blue-400/30"
                          onClick={() => copyToClipboard(window.location.href)}
                        >
                          <Globe className="w-4 h-4 mr-2" />
                          Share Live
                        </Button>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="p-4 bg-white/5 rounded-lg border border-white/10">
                          <h3 className="text-white font-medium mb-2">
                            Customer Analytics Project
                          </h3>
                          <p className="text-gray-400 text-sm mb-3">
                            Collaborative analysis of customer segmentation and
                            lifetime value
                          </p>
                          <div className="flex items-center justify-between">
                            <div className="flex -space-x-2">
                              {["SM", "DK", "AR", "JD"].map((initial, i) => (
                                <div
                                  key={i}
                                  className="w-6 h-6 bg-gradient-to-br from-purple-400 to-blue-500 rounded-full flex items-center justify-center text-xs font-bold text-white border-2 border-gray-800"
                                >
                                  {initial}
                                </div>
                              ))}
                            </div>
                            <Badge className="bg-green-500/20 text-green-300">
                              Live
                            </Badge>
                          </div>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <Button className="bg-purple-500/20 text-purple-300 border-purple-400/30">
                            <BookOpen className="w-4 h-4 mr-2" />
                            Documentation
                          </Button>
                          <Button className="bg-orange-500/20 text-orange-300 border-orange-400/30">
                            <Shield className="w-4 h-4 mr-2" />
                            Access Control
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Index;
